Created by PLY (http://www.dabeaz.com/ply)

Unused terminals:

    BRACKET_CLOSE
    BRACKET_OPEN
    CURLY_CLOSE
    CURLY_OPEN
    EQUAL
    GREATER
    GREATER_EQ
    HASH
    LESS
    LESS_EQ
    NOT_EQUAL

Grammar

Rule 0     S' -> program
Rule 1     program -> operation
Rule 2     program -> program operation
Rule 3     operation -> expr end
Rule 4     operation -> assign end
Rule 5     operation -> fcall end
Rule 6     operation -> end
Rule 7     expr -> limit
Rule 8     expr -> derivate
Rule 9     expr -> factorial
Rule 10    expr -> abs
Rule 11    abs -> OR expr OR
Rule 12    factorial -> expr FACTOR
Rule 13    derivate -> expr QUOTE
Rule 14    limit -> LIM ANGLE_OPEN to ANGLE_CLOSE expr
Rule 15    to -> id ARROW_RIGHT expr
Rule 16    expr -> fcall
Rule 17    fcall -> id PAREN_OPEN params PAREN_CLOSE
Rule 18    fcall -> id PAREN_OPEN PAREN_CLOSE
Rule 19    params -> expr
Rule 20    params -> params COMMA expr
Rule 21    assign -> id ASSIGN expr
Rule 22    assign -> fcall ASSIGN expr
Rule 23    expr -> value
Rule 24    expr -> expr arith expr
Rule 25    expr -> expr id
Rule 26    arith -> PLUS
Rule 27    arith -> MINUS
Rule 28    arith -> MUL
Rule 29    arith -> DIV
Rule 30    arith -> EXPON
Rule 31    expr -> PAREN_OPEN expr PAREN_CLOSE
Rule 32    value -> MINUS value
Rule 33    value -> STRING
Rule 34    value -> id
Rule 35    value -> bool
Rule 36    id -> ID
Rule 37    bool -> TRUE
Rule 38    bool -> FALSE
Rule 39    value -> number
Rule 40    value -> float
Rule 41    number -> INTEGER
Rule 42    float -> INTEGER DOT INTEGER
Rule 43    end -> SEMICOLON
Rule 44    end -> NEWLINE

Terminals, with rules where they appear

ANGLE_CLOSE          : 14
ANGLE_OPEN           : 14
ARROW_RIGHT          : 15
ASSIGN               : 21 22
BRACKET_CLOSE        : 
BRACKET_OPEN         : 
COMMA                : 20
CURLY_CLOSE          : 
CURLY_OPEN           : 
DIV                  : 29
DOT                  : 42
EQUAL                : 
EXPON                : 30
FACTOR               : 12
FALSE                : 38
GREATER              : 
GREATER_EQ           : 
HASH                 : 
ID                   : 36
INTEGER              : 41 42 42
LESS                 : 
LESS_EQ              : 
LIM                  : 14
MINUS                : 27 32
MUL                  : 28
NEWLINE              : 44
NOT_EQUAL            : 
OR                   : 11 11
PAREN_CLOSE          : 17 18 31
PAREN_OPEN           : 17 18 31
PLUS                 : 26
QUOTE                : 13
SEMICOLON            : 43
STRING               : 33
TRUE                 : 37
error                : 

Nonterminals, with rules where they appear

abs                  : 10
arith                : 24
assign               : 4
bool                 : 35
derivate             : 8
end                  : 3 4 5 6
expr                 : 3 11 12 13 14 15 19 20 21 22 24 24 25 31
factorial            : 9
fcall                : 5 16 22
float                : 40
id                   : 15 17 18 21 25 34
limit                : 7
number               : 39
operation            : 1 2
params               : 17 20
program              : 2 0
to                   : 14
value                : 23 32


state 0

    (0) S' -> . program
    (1) program -> . operation
    (2) program -> . program operation
    (3) operation -> . expr end
    (4) operation -> . assign end
    (5) operation -> . fcall end
    (6) operation -> . end
    (7) expr -> . limit
    (8) expr -> . derivate
    (9) expr -> . factorial
    (10) expr -> . abs
    (16) expr -> . fcall
    (23) expr -> . value
    (24) expr -> . expr arith expr
    (25) expr -> . expr id
    (31) expr -> . PAREN_OPEN expr PAREN_CLOSE
    (21) assign -> . id ASSIGN expr
    (22) assign -> . fcall ASSIGN expr
    (17) fcall -> . id PAREN_OPEN params PAREN_CLOSE
    (18) fcall -> . id PAREN_OPEN PAREN_CLOSE
    (43) end -> . SEMICOLON
    (44) end -> . NEWLINE
    (14) limit -> . LIM ANGLE_OPEN to ANGLE_CLOSE expr
    (13) derivate -> . expr QUOTE
    (12) factorial -> . expr FACTOR
    (11) abs -> . OR expr OR
    (32) value -> . MINUS value
    (33) value -> . STRING
    (34) value -> . id
    (35) value -> . bool
    (39) value -> . number
    (40) value -> . float
    (36) id -> . ID
    (37) bool -> . TRUE
    (38) bool -> . FALSE
    (41) number -> . INTEGER
    (42) float -> . INTEGER DOT INTEGER

    PAREN_OPEN      shift and go to state 13
    SEMICOLON       shift and go to state 14
    NEWLINE         shift and go to state 15
    LIM             shift and go to state 16
    OR              shift and go to state 17
    MINUS           shift and go to state 18
    STRING          shift and go to state 19
    ID              shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    INTEGER         shift and go to state 26

    program                        shift and go to state 1
    operation                      shift and go to state 2
    expr                           shift and go to state 3
    end                            shift and go to state 4
    assign                         shift and go to state 5
    fcall                          shift and go to state 6
    limit                          shift and go to state 7
    derivate                       shift and go to state 8
    factorial                      shift and go to state 9
    abs                            shift and go to state 10
    value                          shift and go to state 11
    id                             shift and go to state 12
    bool                           shift and go to state 20
    number                         shift and go to state 21
    float                          shift and go to state 22

state 1

    (0) S' -> program .
    (2) program -> program . operation
    (3) operation -> . expr end
    (4) operation -> . assign end
    (5) operation -> . fcall end
    (6) operation -> . end
    (7) expr -> . limit
    (8) expr -> . derivate
    (9) expr -> . factorial
    (10) expr -> . abs
    (16) expr -> . fcall
    (23) expr -> . value
    (24) expr -> . expr arith expr
    (25) expr -> . expr id
    (31) expr -> . PAREN_OPEN expr PAREN_CLOSE
    (21) assign -> . id ASSIGN expr
    (22) assign -> . fcall ASSIGN expr
    (17) fcall -> . id PAREN_OPEN params PAREN_CLOSE
    (18) fcall -> . id PAREN_OPEN PAREN_CLOSE
    (43) end -> . SEMICOLON
    (44) end -> . NEWLINE
    (14) limit -> . LIM ANGLE_OPEN to ANGLE_CLOSE expr
    (13) derivate -> . expr QUOTE
    (12) factorial -> . expr FACTOR
    (11) abs -> . OR expr OR
    (32) value -> . MINUS value
    (33) value -> . STRING
    (34) value -> . id
    (35) value -> . bool
    (39) value -> . number
    (40) value -> . float
    (36) id -> . ID
    (37) bool -> . TRUE
    (38) bool -> . FALSE
    (41) number -> . INTEGER
    (42) float -> . INTEGER DOT INTEGER

    PAREN_OPEN      shift and go to state 13
    SEMICOLON       shift and go to state 14
    NEWLINE         shift and go to state 15
    LIM             shift and go to state 16
    OR              shift and go to state 17
    MINUS           shift and go to state 18
    STRING          shift and go to state 19
    ID              shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    INTEGER         shift and go to state 26

    operation                      shift and go to state 27
    expr                           shift and go to state 3
    end                            shift and go to state 4
    assign                         shift and go to state 5
    fcall                          shift and go to state 6
    limit                          shift and go to state 7
    derivate                       shift and go to state 8
    factorial                      shift and go to state 9
    abs                            shift and go to state 10
    value                          shift and go to state 11
    id                             shift and go to state 12
    bool                           shift and go to state 20
    number                         shift and go to state 21
    float                          shift and go to state 22

state 2

    (1) program -> operation .

    PAREN_OPEN      reduce using rule 1 (program -> operation .)
    SEMICOLON       reduce using rule 1 (program -> operation .)
    NEWLINE         reduce using rule 1 (program -> operation .)
    LIM             reduce using rule 1 (program -> operation .)
    OR              reduce using rule 1 (program -> operation .)
    MINUS           reduce using rule 1 (program -> operation .)
    STRING          reduce using rule 1 (program -> operation .)
    ID              reduce using rule 1 (program -> operation .)
    TRUE            reduce using rule 1 (program -> operation .)
    FALSE           reduce using rule 1 (program -> operation .)
    INTEGER         reduce using rule 1 (program -> operation .)
    $end            reduce using rule 1 (program -> operation .)


state 3

    (3) operation -> expr . end
    (24) expr -> expr . arith expr
    (25) expr -> expr . id
    (13) derivate -> expr . QUOTE
    (12) factorial -> expr . FACTOR
    (43) end -> . SEMICOLON
    (44) end -> . NEWLINE
    (26) arith -> . PLUS
    (27) arith -> . MINUS
    (28) arith -> . MUL
    (29) arith -> . DIV
    (30) arith -> . EXPON
    (36) id -> . ID

    QUOTE           shift and go to state 31
    FACTOR          shift and go to state 32
    SEMICOLON       shift and go to state 14
    NEWLINE         shift and go to state 15
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    MUL             shift and go to state 35
    DIV             shift and go to state 36
    EXPON           shift and go to state 37
    ID              shift and go to state 23

    end                            shift and go to state 28
    arith                          shift and go to state 29
    id                             shift and go to state 30

state 4

    (6) operation -> end .

    PAREN_OPEN      reduce using rule 6 (operation -> end .)
    SEMICOLON       reduce using rule 6 (operation -> end .)
    NEWLINE         reduce using rule 6 (operation -> end .)
    LIM             reduce using rule 6 (operation -> end .)
    OR              reduce using rule 6 (operation -> end .)
    MINUS           reduce using rule 6 (operation -> end .)
    STRING          reduce using rule 6 (operation -> end .)
    ID              reduce using rule 6 (operation -> end .)
    TRUE            reduce using rule 6 (operation -> end .)
    FALSE           reduce using rule 6 (operation -> end .)
    INTEGER         reduce using rule 6 (operation -> end .)
    $end            reduce using rule 6 (operation -> end .)


state 5

    (4) operation -> assign . end
    (43) end -> . SEMICOLON
    (44) end -> . NEWLINE

    SEMICOLON       shift and go to state 14
    NEWLINE         shift and go to state 15

    end                            shift and go to state 38

state 6

    (5) operation -> fcall . end
    (16) expr -> fcall .
    (22) assign -> fcall . ASSIGN expr
    (43) end -> . SEMICOLON
    (44) end -> . NEWLINE

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
    QUOTE           reduce using rule 16 (expr -> fcall .)
    FACTOR          reduce using rule 16 (expr -> fcall .)
    PLUS            reduce using rule 16 (expr -> fcall .)
    MINUS           reduce using rule 16 (expr -> fcall .)
    MUL             reduce using rule 16 (expr -> fcall .)
    DIV             reduce using rule 16 (expr -> fcall .)
    EXPON           reduce using rule 16 (expr -> fcall .)
    ID              reduce using rule 16 (expr -> fcall .)
    ASSIGN          shift and go to state 40
    SEMICOLON       shift and go to state 14
    NEWLINE         shift and go to state 15

  ! SEMICOLON       [ reduce using rule 16 (expr -> fcall .) ]
  ! NEWLINE         [ reduce using rule 16 (expr -> fcall .) ]

    end                            shift and go to state 39

state 7

    (7) expr -> limit .

    QUOTE           reduce using rule 7 (expr -> limit .)
    FACTOR          reduce using rule 7 (expr -> limit .)
    SEMICOLON       reduce using rule 7 (expr -> limit .)
    NEWLINE         reduce using rule 7 (expr -> limit .)
    PLUS            reduce using rule 7 (expr -> limit .)
    MINUS           reduce using rule 7 (expr -> limit .)
    MUL             reduce using rule 7 (expr -> limit .)
    DIV             reduce using rule 7 (expr -> limit .)
    EXPON           reduce using rule 7 (expr -> limit .)
    ID              reduce using rule 7 (expr -> limit .)
    PAREN_CLOSE     reduce using rule 7 (expr -> limit .)
    OR              reduce using rule 7 (expr -> limit .)
    COMMA           reduce using rule 7 (expr -> limit .)
    ANGLE_CLOSE     reduce using rule 7 (expr -> limit .)


state 8

    (8) expr -> derivate .

    QUOTE           reduce using rule 8 (expr -> derivate .)
    FACTOR          reduce using rule 8 (expr -> derivate .)
    SEMICOLON       reduce using rule 8 (expr -> derivate .)
    NEWLINE         reduce using rule 8 (expr -> derivate .)
    PLUS            reduce using rule 8 (expr -> derivate .)
    MINUS           reduce using rule 8 (expr -> derivate .)
    MUL             reduce using rule 8 (expr -> derivate .)
    DIV             reduce using rule 8 (expr -> derivate .)
    EXPON           reduce using rule 8 (expr -> derivate .)
    ID              reduce using rule 8 (expr -> derivate .)
    PAREN_CLOSE     reduce using rule 8 (expr -> derivate .)
    OR              reduce using rule 8 (expr -> derivate .)
    COMMA           reduce using rule 8 (expr -> derivate .)
    ANGLE_CLOSE     reduce using rule 8 (expr -> derivate .)


state 9

    (9) expr -> factorial .

    QUOTE           reduce using rule 9 (expr -> factorial .)
    FACTOR          reduce using rule 9 (expr -> factorial .)
    SEMICOLON       reduce using rule 9 (expr -> factorial .)
    NEWLINE         reduce using rule 9 (expr -> factorial .)
    PLUS            reduce using rule 9 (expr -> factorial .)
    MINUS           reduce using rule 9 (expr -> factorial .)
    MUL             reduce using rule 9 (expr -> factorial .)
    DIV             reduce using rule 9 (expr -> factorial .)
    EXPON           reduce using rule 9 (expr -> factorial .)
    ID              reduce using rule 9 (expr -> factorial .)
    PAREN_CLOSE     reduce using rule 9 (expr -> factorial .)
    OR              reduce using rule 9 (expr -> factorial .)
    COMMA           reduce using rule 9 (expr -> factorial .)
    ANGLE_CLOSE     reduce using rule 9 (expr -> factorial .)


state 10

    (10) expr -> abs .

    QUOTE           reduce using rule 10 (expr -> abs .)
    FACTOR          reduce using rule 10 (expr -> abs .)
    SEMICOLON       reduce using rule 10 (expr -> abs .)
    NEWLINE         reduce using rule 10 (expr -> abs .)
    PLUS            reduce using rule 10 (expr -> abs .)
    MINUS           reduce using rule 10 (expr -> abs .)
    MUL             reduce using rule 10 (expr -> abs .)
    DIV             reduce using rule 10 (expr -> abs .)
    EXPON           reduce using rule 10 (expr -> abs .)
    ID              reduce using rule 10 (expr -> abs .)
    PAREN_CLOSE     reduce using rule 10 (expr -> abs .)
    OR              reduce using rule 10 (expr -> abs .)
    COMMA           reduce using rule 10 (expr -> abs .)
    ANGLE_CLOSE     reduce using rule 10 (expr -> abs .)


state 11

    (23) expr -> value .

    QUOTE           reduce using rule 23 (expr -> value .)
    FACTOR          reduce using rule 23 (expr -> value .)
    SEMICOLON       reduce using rule 23 (expr -> value .)
    NEWLINE         reduce using rule 23 (expr -> value .)
    PLUS            reduce using rule 23 (expr -> value .)
    MINUS           reduce using rule 23 (expr -> value .)
    MUL             reduce using rule 23 (expr -> value .)
    DIV             reduce using rule 23 (expr -> value .)
    EXPON           reduce using rule 23 (expr -> value .)
    ID              reduce using rule 23 (expr -> value .)
    PAREN_CLOSE     reduce using rule 23 (expr -> value .)
    OR              reduce using rule 23 (expr -> value .)
    COMMA           reduce using rule 23 (expr -> value .)
    ANGLE_CLOSE     reduce using rule 23 (expr -> value .)


state 12

    (21) assign -> id . ASSIGN expr
    (17) fcall -> id . PAREN_OPEN params PAREN_CLOSE
    (18) fcall -> id . PAREN_OPEN PAREN_CLOSE
    (34) value -> id .

    ASSIGN          shift and go to state 41
    PAREN_OPEN      shift and go to state 42
    QUOTE           reduce using rule 34 (value -> id .)
    FACTOR          reduce using rule 34 (value -> id .)
    SEMICOLON       reduce using rule 34 (value -> id .)
    NEWLINE         reduce using rule 34 (value -> id .)
    PLUS            reduce using rule 34 (value -> id .)
    MINUS           reduce using rule 34 (value -> id .)
    MUL             reduce using rule 34 (value -> id .)
    DIV             reduce using rule 34 (value -> id .)
    EXPON           reduce using rule 34 (value -> id .)
    ID              reduce using rule 34 (value -> id .)


state 13

    (31) expr -> PAREN_OPEN . expr PAREN_CLOSE
    (7) expr -> . limit
    (8) expr -> . derivate
    (9) expr -> . factorial
    (10) expr -> . abs
    (16) expr -> . fcall
    (23) expr -> . value
    (24) expr -> . expr arith expr
    (25) expr -> . expr id
    (31) expr -> . PAREN_OPEN expr PAREN_CLOSE
    (14) limit -> . LIM ANGLE_OPEN to ANGLE_CLOSE expr
    (13) derivate -> . expr QUOTE
    (12) factorial -> . expr FACTOR
    (11) abs -> . OR expr OR
    (17) fcall -> . id PAREN_OPEN params PAREN_CLOSE
    (18) fcall -> . id PAREN_OPEN PAREN_CLOSE
    (32) value -> . MINUS value
    (33) value -> . STRING
    (34) value -> . id
    (35) value -> . bool
    (39) value -> . number
    (40) value -> . float
    (36) id -> . ID
    (37) bool -> . TRUE
    (38) bool -> . FALSE
    (41) number -> . INTEGER
    (42) float -> . INTEGER DOT INTEGER

    PAREN_OPEN      shift and go to state 13
    LIM             shift and go to state 16
    OR              shift and go to state 17
    MINUS           shift and go to state 18
    STRING          shift and go to state 19
    ID              shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    INTEGER         shift and go to state 26

    expr                           shift and go to state 43
    limit                          shift and go to state 7
    derivate                       shift and go to state 8
    factorial                      shift and go to state 9
    abs                            shift and go to state 10
    fcall                          shift and go to state 44
    value                          shift and go to state 11
    id                             shift and go to state 45
    bool                           shift and go to state 20
    number                         shift and go to state 21
    float                          shift and go to state 22

state 14

    (43) end -> SEMICOLON .

    PAREN_OPEN      reduce using rule 43 (end -> SEMICOLON .)
    SEMICOLON       reduce using rule 43 (end -> SEMICOLON .)
    NEWLINE         reduce using rule 43 (end -> SEMICOLON .)
    LIM             reduce using rule 43 (end -> SEMICOLON .)
    OR              reduce using rule 43 (end -> SEMICOLON .)
    MINUS           reduce using rule 43 (end -> SEMICOLON .)
    STRING          reduce using rule 43 (end -> SEMICOLON .)
    ID              reduce using rule 43 (end -> SEMICOLON .)
    TRUE            reduce using rule 43 (end -> SEMICOLON .)
    FALSE           reduce using rule 43 (end -> SEMICOLON .)
    INTEGER         reduce using rule 43 (end -> SEMICOLON .)
    $end            reduce using rule 43 (end -> SEMICOLON .)


state 15

    (44) end -> NEWLINE .

    PAREN_OPEN      reduce using rule 44 (end -> NEWLINE .)
    SEMICOLON       reduce using rule 44 (end -> NEWLINE .)
    NEWLINE         reduce using rule 44 (end -> NEWLINE .)
    LIM             reduce using rule 44 (end -> NEWLINE .)
    OR              reduce using rule 44 (end -> NEWLINE .)
    MINUS           reduce using rule 44 (end -> NEWLINE .)
    STRING          reduce using rule 44 (end -> NEWLINE .)
    ID              reduce using rule 44 (end -> NEWLINE .)
    TRUE            reduce using rule 44 (end -> NEWLINE .)
    FALSE           reduce using rule 44 (end -> NEWLINE .)
    INTEGER         reduce using rule 44 (end -> NEWLINE .)
    $end            reduce using rule 44 (end -> NEWLINE .)


state 16

    (14) limit -> LIM . ANGLE_OPEN to ANGLE_CLOSE expr

    ANGLE_OPEN      shift and go to state 46


state 17

    (11) abs -> OR . expr OR
    (7) expr -> . limit
    (8) expr -> . derivate
    (9) expr -> . factorial
    (10) expr -> . abs
    (16) expr -> . fcall
    (23) expr -> . value
    (24) expr -> . expr arith expr
    (25) expr -> . expr id
    (31) expr -> . PAREN_OPEN expr PAREN_CLOSE
    (14) limit -> . LIM ANGLE_OPEN to ANGLE_CLOSE expr
    (13) derivate -> . expr QUOTE
    (12) factorial -> . expr FACTOR
    (11) abs -> . OR expr OR
    (17) fcall -> . id PAREN_OPEN params PAREN_CLOSE
    (18) fcall -> . id PAREN_OPEN PAREN_CLOSE
    (32) value -> . MINUS value
    (33) value -> . STRING
    (34) value -> . id
    (35) value -> . bool
    (39) value -> . number
    (40) value -> . float
    (36) id -> . ID
    (37) bool -> . TRUE
    (38) bool -> . FALSE
    (41) number -> . INTEGER
    (42) float -> . INTEGER DOT INTEGER

    PAREN_OPEN      shift and go to state 13
    LIM             shift and go to state 16
    OR              shift and go to state 17
    MINUS           shift and go to state 18
    STRING          shift and go to state 19
    ID              shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    INTEGER         shift and go to state 26

    expr                           shift and go to state 47
    limit                          shift and go to state 7
    derivate                       shift and go to state 8
    factorial                      shift and go to state 9
    abs                            shift and go to state 10
    fcall                          shift and go to state 44
    value                          shift and go to state 11
    id                             shift and go to state 45
    bool                           shift and go to state 20
    number                         shift and go to state 21
    float                          shift and go to state 22

state 18

    (32) value -> MINUS . value
    (32) value -> . MINUS value
    (33) value -> . STRING
    (34) value -> . id
    (35) value -> . bool
    (39) value -> . number
    (40) value -> . float
    (36) id -> . ID
    (37) bool -> . TRUE
    (38) bool -> . FALSE
    (41) number -> . INTEGER
    (42) float -> . INTEGER DOT INTEGER

    MINUS           shift and go to state 18
    STRING          shift and go to state 19
    ID              shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    INTEGER         shift and go to state 26

    value                          shift and go to state 48
    id                             shift and go to state 49
    bool                           shift and go to state 20
    number                         shift and go to state 21
    float                          shift and go to state 22

state 19

    (33) value -> STRING .

    QUOTE           reduce using rule 33 (value -> STRING .)
    FACTOR          reduce using rule 33 (value -> STRING .)
    SEMICOLON       reduce using rule 33 (value -> STRING .)
    NEWLINE         reduce using rule 33 (value -> STRING .)
    PLUS            reduce using rule 33 (value -> STRING .)
    MINUS           reduce using rule 33 (value -> STRING .)
    MUL             reduce using rule 33 (value -> STRING .)
    DIV             reduce using rule 33 (value -> STRING .)
    EXPON           reduce using rule 33 (value -> STRING .)
    ID              reduce using rule 33 (value -> STRING .)
    PAREN_CLOSE     reduce using rule 33 (value -> STRING .)
    OR              reduce using rule 33 (value -> STRING .)
    COMMA           reduce using rule 33 (value -> STRING .)
    ANGLE_CLOSE     reduce using rule 33 (value -> STRING .)


state 20

    (35) value -> bool .

    QUOTE           reduce using rule 35 (value -> bool .)
    FACTOR          reduce using rule 35 (value -> bool .)
    SEMICOLON       reduce using rule 35 (value -> bool .)
    NEWLINE         reduce using rule 35 (value -> bool .)
    PLUS            reduce using rule 35 (value -> bool .)
    MINUS           reduce using rule 35 (value -> bool .)
    MUL             reduce using rule 35 (value -> bool .)
    DIV             reduce using rule 35 (value -> bool .)
    EXPON           reduce using rule 35 (value -> bool .)
    ID              reduce using rule 35 (value -> bool .)
    PAREN_CLOSE     reduce using rule 35 (value -> bool .)
    OR              reduce using rule 35 (value -> bool .)
    COMMA           reduce using rule 35 (value -> bool .)
    ANGLE_CLOSE     reduce using rule 35 (value -> bool .)


state 21

    (39) value -> number .

    QUOTE           reduce using rule 39 (value -> number .)
    FACTOR          reduce using rule 39 (value -> number .)
    SEMICOLON       reduce using rule 39 (value -> number .)
    NEWLINE         reduce using rule 39 (value -> number .)
    PLUS            reduce using rule 39 (value -> number .)
    MINUS           reduce using rule 39 (value -> number .)
    MUL             reduce using rule 39 (value -> number .)
    DIV             reduce using rule 39 (value -> number .)
    EXPON           reduce using rule 39 (value -> number .)
    ID              reduce using rule 39 (value -> number .)
    PAREN_CLOSE     reduce using rule 39 (value -> number .)
    OR              reduce using rule 39 (value -> number .)
    COMMA           reduce using rule 39 (value -> number .)
    ANGLE_CLOSE     reduce using rule 39 (value -> number .)


state 22

    (40) value -> float .

    QUOTE           reduce using rule 40 (value -> float .)
    FACTOR          reduce using rule 40 (value -> float .)
    SEMICOLON       reduce using rule 40 (value -> float .)
    NEWLINE         reduce using rule 40 (value -> float .)
    PLUS            reduce using rule 40 (value -> float .)
    MINUS           reduce using rule 40 (value -> float .)
    MUL             reduce using rule 40 (value -> float .)
    DIV             reduce using rule 40 (value -> float .)
    EXPON           reduce using rule 40 (value -> float .)
    ID              reduce using rule 40 (value -> float .)
    PAREN_CLOSE     reduce using rule 40 (value -> float .)
    OR              reduce using rule 40 (value -> float .)
    COMMA           reduce using rule 40 (value -> float .)
    ANGLE_CLOSE     reduce using rule 40 (value -> float .)


state 23

    (36) id -> ID .

    ASSIGN          reduce using rule 36 (id -> ID .)
    PAREN_OPEN      reduce using rule 36 (id -> ID .)
    QUOTE           reduce using rule 36 (id -> ID .)
    FACTOR          reduce using rule 36 (id -> ID .)
    SEMICOLON       reduce using rule 36 (id -> ID .)
    NEWLINE         reduce using rule 36 (id -> ID .)
    PLUS            reduce using rule 36 (id -> ID .)
    MINUS           reduce using rule 36 (id -> ID .)
    MUL             reduce using rule 36 (id -> ID .)
    DIV             reduce using rule 36 (id -> ID .)
    EXPON           reduce using rule 36 (id -> ID .)
    ID              reduce using rule 36 (id -> ID .)
    PAREN_CLOSE     reduce using rule 36 (id -> ID .)
    OR              reduce using rule 36 (id -> ID .)
    COMMA           reduce using rule 36 (id -> ID .)
    ANGLE_CLOSE     reduce using rule 36 (id -> ID .)
    ARROW_RIGHT     reduce using rule 36 (id -> ID .)


state 24

    (37) bool -> TRUE .

    QUOTE           reduce using rule 37 (bool -> TRUE .)
    FACTOR          reduce using rule 37 (bool -> TRUE .)
    SEMICOLON       reduce using rule 37 (bool -> TRUE .)
    NEWLINE         reduce using rule 37 (bool -> TRUE .)
    PLUS            reduce using rule 37 (bool -> TRUE .)
    MINUS           reduce using rule 37 (bool -> TRUE .)
    MUL             reduce using rule 37 (bool -> TRUE .)
    DIV             reduce using rule 37 (bool -> TRUE .)
    EXPON           reduce using rule 37 (bool -> TRUE .)
    ID              reduce using rule 37 (bool -> TRUE .)
    PAREN_CLOSE     reduce using rule 37 (bool -> TRUE .)
    OR              reduce using rule 37 (bool -> TRUE .)
    COMMA           reduce using rule 37 (bool -> TRUE .)
    ANGLE_CLOSE     reduce using rule 37 (bool -> TRUE .)


state 25

    (38) bool -> FALSE .

    QUOTE           reduce using rule 38 (bool -> FALSE .)
    FACTOR          reduce using rule 38 (bool -> FALSE .)
    SEMICOLON       reduce using rule 38 (bool -> FALSE .)
    NEWLINE         reduce using rule 38 (bool -> FALSE .)
    PLUS            reduce using rule 38 (bool -> FALSE .)
    MINUS           reduce using rule 38 (bool -> FALSE .)
    MUL             reduce using rule 38 (bool -> FALSE .)
    DIV             reduce using rule 38 (bool -> FALSE .)
    EXPON           reduce using rule 38 (bool -> FALSE .)
    ID              reduce using rule 38 (bool -> FALSE .)
    PAREN_CLOSE     reduce using rule 38 (bool -> FALSE .)
    OR              reduce using rule 38 (bool -> FALSE .)
    COMMA           reduce using rule 38 (bool -> FALSE .)
    ANGLE_CLOSE     reduce using rule 38 (bool -> FALSE .)


state 26

    (41) number -> INTEGER .
    (42) float -> INTEGER . DOT INTEGER

    QUOTE           reduce using rule 41 (number -> INTEGER .)
    FACTOR          reduce using rule 41 (number -> INTEGER .)
    SEMICOLON       reduce using rule 41 (number -> INTEGER .)
    NEWLINE         reduce using rule 41 (number -> INTEGER .)
    PLUS            reduce using rule 41 (number -> INTEGER .)
    MINUS           reduce using rule 41 (number -> INTEGER .)
    MUL             reduce using rule 41 (number -> INTEGER .)
    DIV             reduce using rule 41 (number -> INTEGER .)
    EXPON           reduce using rule 41 (number -> INTEGER .)
    ID              reduce using rule 41 (number -> INTEGER .)
    PAREN_CLOSE     reduce using rule 41 (number -> INTEGER .)
    OR              reduce using rule 41 (number -> INTEGER .)
    COMMA           reduce using rule 41 (number -> INTEGER .)
    ANGLE_CLOSE     reduce using rule 41 (number -> INTEGER .)
    DOT             shift and go to state 50


state 27

    (2) program -> program operation .

    PAREN_OPEN      reduce using rule 2 (program -> program operation .)
    SEMICOLON       reduce using rule 2 (program -> program operation .)
    NEWLINE         reduce using rule 2 (program -> program operation .)
    LIM             reduce using rule 2 (program -> program operation .)
    OR              reduce using rule 2 (program -> program operation .)
    MINUS           reduce using rule 2 (program -> program operation .)
    STRING          reduce using rule 2 (program -> program operation .)
    ID              reduce using rule 2 (program -> program operation .)
    TRUE            reduce using rule 2 (program -> program operation .)
    FALSE           reduce using rule 2 (program -> program operation .)
    INTEGER         reduce using rule 2 (program -> program operation .)
    $end            reduce using rule 2 (program -> program operation .)


state 28

    (3) operation -> expr end .

    PAREN_OPEN      reduce using rule 3 (operation -> expr end .)
    SEMICOLON       reduce using rule 3 (operation -> expr end .)
    NEWLINE         reduce using rule 3 (operation -> expr end .)
    LIM             reduce using rule 3 (operation -> expr end .)
    OR              reduce using rule 3 (operation -> expr end .)
    MINUS           reduce using rule 3 (operation -> expr end .)
    STRING          reduce using rule 3 (operation -> expr end .)
    ID              reduce using rule 3 (operation -> expr end .)
    TRUE            reduce using rule 3 (operation -> expr end .)
    FALSE           reduce using rule 3 (operation -> expr end .)
    INTEGER         reduce using rule 3 (operation -> expr end .)
    $end            reduce using rule 3 (operation -> expr end .)


state 29

    (24) expr -> expr arith . expr
    (7) expr -> . limit
    (8) expr -> . derivate
    (9) expr -> . factorial
    (10) expr -> . abs
    (16) expr -> . fcall
    (23) expr -> . value
    (24) expr -> . expr arith expr
    (25) expr -> . expr id
    (31) expr -> . PAREN_OPEN expr PAREN_CLOSE
    (14) limit -> . LIM ANGLE_OPEN to ANGLE_CLOSE expr
    (13) derivate -> . expr QUOTE
    (12) factorial -> . expr FACTOR
    (11) abs -> . OR expr OR
    (17) fcall -> . id PAREN_OPEN params PAREN_CLOSE
    (18) fcall -> . id PAREN_OPEN PAREN_CLOSE
    (32) value -> . MINUS value
    (33) value -> . STRING
    (34) value -> . id
    (35) value -> . bool
    (39) value -> . number
    (40) value -> . float
    (36) id -> . ID
    (37) bool -> . TRUE
    (38) bool -> . FALSE
    (41) number -> . INTEGER
    (42) float -> . INTEGER DOT INTEGER

    PAREN_OPEN      shift and go to state 13
    LIM             shift and go to state 16
    OR              shift and go to state 17
    MINUS           shift and go to state 18
    STRING          shift and go to state 19
    ID              shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    INTEGER         shift and go to state 26

    expr                           shift and go to state 51
    limit                          shift and go to state 7
    derivate                       shift and go to state 8
    factorial                      shift and go to state 9
    abs                            shift and go to state 10
    fcall                          shift and go to state 44
    value                          shift and go to state 11
    id                             shift and go to state 45
    bool                           shift and go to state 20
    number                         shift and go to state 21
    float                          shift and go to state 22

state 30

    (25) expr -> expr id .

    QUOTE           reduce using rule 25 (expr -> expr id .)
    FACTOR          reduce using rule 25 (expr -> expr id .)
    SEMICOLON       reduce using rule 25 (expr -> expr id .)
    NEWLINE         reduce using rule 25 (expr -> expr id .)
    PLUS            reduce using rule 25 (expr -> expr id .)
    MINUS           reduce using rule 25 (expr -> expr id .)
    MUL             reduce using rule 25 (expr -> expr id .)
    DIV             reduce using rule 25 (expr -> expr id .)
    EXPON           reduce using rule 25 (expr -> expr id .)
    ID              reduce using rule 25 (expr -> expr id .)
    PAREN_CLOSE     reduce using rule 25 (expr -> expr id .)
    OR              reduce using rule 25 (expr -> expr id .)
    COMMA           reduce using rule 25 (expr -> expr id .)
    ANGLE_CLOSE     reduce using rule 25 (expr -> expr id .)


state 31

    (13) derivate -> expr QUOTE .

    QUOTE           reduce using rule 13 (derivate -> expr QUOTE .)
    FACTOR          reduce using rule 13 (derivate -> expr QUOTE .)
    SEMICOLON       reduce using rule 13 (derivate -> expr QUOTE .)
    NEWLINE         reduce using rule 13 (derivate -> expr QUOTE .)
    PLUS            reduce using rule 13 (derivate -> expr QUOTE .)
    MINUS           reduce using rule 13 (derivate -> expr QUOTE .)
    MUL             reduce using rule 13 (derivate -> expr QUOTE .)
    DIV             reduce using rule 13 (derivate -> expr QUOTE .)
    EXPON           reduce using rule 13 (derivate -> expr QUOTE .)
    ID              reduce using rule 13 (derivate -> expr QUOTE .)
    PAREN_CLOSE     reduce using rule 13 (derivate -> expr QUOTE .)
    OR              reduce using rule 13 (derivate -> expr QUOTE .)
    COMMA           reduce using rule 13 (derivate -> expr QUOTE .)
    ANGLE_CLOSE     reduce using rule 13 (derivate -> expr QUOTE .)


state 32

    (12) factorial -> expr FACTOR .

    QUOTE           reduce using rule 12 (factorial -> expr FACTOR .)
    FACTOR          reduce using rule 12 (factorial -> expr FACTOR .)
    SEMICOLON       reduce using rule 12 (factorial -> expr FACTOR .)
    NEWLINE         reduce using rule 12 (factorial -> expr FACTOR .)
    PLUS            reduce using rule 12 (factorial -> expr FACTOR .)
    MINUS           reduce using rule 12 (factorial -> expr FACTOR .)
    MUL             reduce using rule 12 (factorial -> expr FACTOR .)
    DIV             reduce using rule 12 (factorial -> expr FACTOR .)
    EXPON           reduce using rule 12 (factorial -> expr FACTOR .)
    ID              reduce using rule 12 (factorial -> expr FACTOR .)
    PAREN_CLOSE     reduce using rule 12 (factorial -> expr FACTOR .)
    OR              reduce using rule 12 (factorial -> expr FACTOR .)
    COMMA           reduce using rule 12 (factorial -> expr FACTOR .)
    ANGLE_CLOSE     reduce using rule 12 (factorial -> expr FACTOR .)


state 33

    (26) arith -> PLUS .

    PAREN_OPEN      reduce using rule 26 (arith -> PLUS .)
    LIM             reduce using rule 26 (arith -> PLUS .)
    OR              reduce using rule 26 (arith -> PLUS .)
    MINUS           reduce using rule 26 (arith -> PLUS .)
    STRING          reduce using rule 26 (arith -> PLUS .)
    ID              reduce using rule 26 (arith -> PLUS .)
    TRUE            reduce using rule 26 (arith -> PLUS .)
    FALSE           reduce using rule 26 (arith -> PLUS .)
    INTEGER         reduce using rule 26 (arith -> PLUS .)


state 34

    (27) arith -> MINUS .

    PAREN_OPEN      reduce using rule 27 (arith -> MINUS .)
    LIM             reduce using rule 27 (arith -> MINUS .)
    OR              reduce using rule 27 (arith -> MINUS .)
    MINUS           reduce using rule 27 (arith -> MINUS .)
    STRING          reduce using rule 27 (arith -> MINUS .)
    ID              reduce using rule 27 (arith -> MINUS .)
    TRUE            reduce using rule 27 (arith -> MINUS .)
    FALSE           reduce using rule 27 (arith -> MINUS .)
    INTEGER         reduce using rule 27 (arith -> MINUS .)


state 35

    (28) arith -> MUL .

    PAREN_OPEN      reduce using rule 28 (arith -> MUL .)
    LIM             reduce using rule 28 (arith -> MUL .)
    OR              reduce using rule 28 (arith -> MUL .)
    MINUS           reduce using rule 28 (arith -> MUL .)
    STRING          reduce using rule 28 (arith -> MUL .)
    ID              reduce using rule 28 (arith -> MUL .)
    TRUE            reduce using rule 28 (arith -> MUL .)
    FALSE           reduce using rule 28 (arith -> MUL .)
    INTEGER         reduce using rule 28 (arith -> MUL .)


state 36

    (29) arith -> DIV .

    PAREN_OPEN      reduce using rule 29 (arith -> DIV .)
    LIM             reduce using rule 29 (arith -> DIV .)
    OR              reduce using rule 29 (arith -> DIV .)
    MINUS           reduce using rule 29 (arith -> DIV .)
    STRING          reduce using rule 29 (arith -> DIV .)
    ID              reduce using rule 29 (arith -> DIV .)
    TRUE            reduce using rule 29 (arith -> DIV .)
    FALSE           reduce using rule 29 (arith -> DIV .)
    INTEGER         reduce using rule 29 (arith -> DIV .)


state 37

    (30) arith -> EXPON .

    PAREN_OPEN      reduce using rule 30 (arith -> EXPON .)
    LIM             reduce using rule 30 (arith -> EXPON .)
    OR              reduce using rule 30 (arith -> EXPON .)
    MINUS           reduce using rule 30 (arith -> EXPON .)
    STRING          reduce using rule 30 (arith -> EXPON .)
    ID              reduce using rule 30 (arith -> EXPON .)
    TRUE            reduce using rule 30 (arith -> EXPON .)
    FALSE           reduce using rule 30 (arith -> EXPON .)
    INTEGER         reduce using rule 30 (arith -> EXPON .)


state 38

    (4) operation -> assign end .

    PAREN_OPEN      reduce using rule 4 (operation -> assign end .)
    SEMICOLON       reduce using rule 4 (operation -> assign end .)
    NEWLINE         reduce using rule 4 (operation -> assign end .)
    LIM             reduce using rule 4 (operation -> assign end .)
    OR              reduce using rule 4 (operation -> assign end .)
    MINUS           reduce using rule 4 (operation -> assign end .)
    STRING          reduce using rule 4 (operation -> assign end .)
    ID              reduce using rule 4 (operation -> assign end .)
    TRUE            reduce using rule 4 (operation -> assign end .)
    FALSE           reduce using rule 4 (operation -> assign end .)
    INTEGER         reduce using rule 4 (operation -> assign end .)
    $end            reduce using rule 4 (operation -> assign end .)


state 39

    (5) operation -> fcall end .

    PAREN_OPEN      reduce using rule 5 (operation -> fcall end .)
    SEMICOLON       reduce using rule 5 (operation -> fcall end .)
    NEWLINE         reduce using rule 5 (operation -> fcall end .)
    LIM             reduce using rule 5 (operation -> fcall end .)
    OR              reduce using rule 5 (operation -> fcall end .)
    MINUS           reduce using rule 5 (operation -> fcall end .)
    STRING          reduce using rule 5 (operation -> fcall end .)
    ID              reduce using rule 5 (operation -> fcall end .)
    TRUE            reduce using rule 5 (operation -> fcall end .)
    FALSE           reduce using rule 5 (operation -> fcall end .)
    INTEGER         reduce using rule 5 (operation -> fcall end .)
    $end            reduce using rule 5 (operation -> fcall end .)


state 40

    (22) assign -> fcall ASSIGN . expr
    (7) expr -> . limit
    (8) expr -> . derivate
    (9) expr -> . factorial
    (10) expr -> . abs
    (16) expr -> . fcall
    (23) expr -> . value
    (24) expr -> . expr arith expr
    (25) expr -> . expr id
    (31) expr -> . PAREN_OPEN expr PAREN_CLOSE
    (14) limit -> . LIM ANGLE_OPEN to ANGLE_CLOSE expr
    (13) derivate -> . expr QUOTE
    (12) factorial -> . expr FACTOR
    (11) abs -> . OR expr OR
    (17) fcall -> . id PAREN_OPEN params PAREN_CLOSE
    (18) fcall -> . id PAREN_OPEN PAREN_CLOSE
    (32) value -> . MINUS value
    (33) value -> . STRING
    (34) value -> . id
    (35) value -> . bool
    (39) value -> . number
    (40) value -> . float
    (36) id -> . ID
    (37) bool -> . TRUE
    (38) bool -> . FALSE
    (41) number -> . INTEGER
    (42) float -> . INTEGER DOT INTEGER

    PAREN_OPEN      shift and go to state 13
    LIM             shift and go to state 16
    OR              shift and go to state 17
    MINUS           shift and go to state 18
    STRING          shift and go to state 19
    ID              shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    INTEGER         shift and go to state 26

    fcall                          shift and go to state 44
    expr                           shift and go to state 52
    limit                          shift and go to state 7
    derivate                       shift and go to state 8
    factorial                      shift and go to state 9
    abs                            shift and go to state 10
    value                          shift and go to state 11
    id                             shift and go to state 45
    bool                           shift and go to state 20
    number                         shift and go to state 21
    float                          shift and go to state 22

state 41

    (21) assign -> id ASSIGN . expr
    (7) expr -> . limit
    (8) expr -> . derivate
    (9) expr -> . factorial
    (10) expr -> . abs
    (16) expr -> . fcall
    (23) expr -> . value
    (24) expr -> . expr arith expr
    (25) expr -> . expr id
    (31) expr -> . PAREN_OPEN expr PAREN_CLOSE
    (14) limit -> . LIM ANGLE_OPEN to ANGLE_CLOSE expr
    (13) derivate -> . expr QUOTE
    (12) factorial -> . expr FACTOR
    (11) abs -> . OR expr OR
    (17) fcall -> . id PAREN_OPEN params PAREN_CLOSE
    (18) fcall -> . id PAREN_OPEN PAREN_CLOSE
    (32) value -> . MINUS value
    (33) value -> . STRING
    (34) value -> . id
    (35) value -> . bool
    (39) value -> . number
    (40) value -> . float
    (36) id -> . ID
    (37) bool -> . TRUE
    (38) bool -> . FALSE
    (41) number -> . INTEGER
    (42) float -> . INTEGER DOT INTEGER

    PAREN_OPEN      shift and go to state 13
    LIM             shift and go to state 16
    OR              shift and go to state 17
    MINUS           shift and go to state 18
    STRING          shift and go to state 19
    ID              shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    INTEGER         shift and go to state 26

    id                             shift and go to state 45
    expr                           shift and go to state 53
    limit                          shift and go to state 7
    derivate                       shift and go to state 8
    factorial                      shift and go to state 9
    abs                            shift and go to state 10
    fcall                          shift and go to state 44
    value                          shift and go to state 11
    bool                           shift and go to state 20
    number                         shift and go to state 21
    float                          shift and go to state 22

state 42

    (17) fcall -> id PAREN_OPEN . params PAREN_CLOSE
    (18) fcall -> id PAREN_OPEN . PAREN_CLOSE
    (19) params -> . expr
    (20) params -> . params COMMA expr
    (7) expr -> . limit
    (8) expr -> . derivate
    (9) expr -> . factorial
    (10) expr -> . abs
    (16) expr -> . fcall
    (23) expr -> . value
    (24) expr -> . expr arith expr
    (25) expr -> . expr id
    (31) expr -> . PAREN_OPEN expr PAREN_CLOSE
    (14) limit -> . LIM ANGLE_OPEN to ANGLE_CLOSE expr
    (13) derivate -> . expr QUOTE
    (12) factorial -> . expr FACTOR
    (11) abs -> . OR expr OR
    (17) fcall -> . id PAREN_OPEN params PAREN_CLOSE
    (18) fcall -> . id PAREN_OPEN PAREN_CLOSE
    (32) value -> . MINUS value
    (33) value -> . STRING
    (34) value -> . id
    (35) value -> . bool
    (39) value -> . number
    (40) value -> . float
    (36) id -> . ID
    (37) bool -> . TRUE
    (38) bool -> . FALSE
    (41) number -> . INTEGER
    (42) float -> . INTEGER DOT INTEGER

    PAREN_CLOSE     shift and go to state 55
    PAREN_OPEN      shift and go to state 13
    LIM             shift and go to state 16
    OR              shift and go to state 17
    MINUS           shift and go to state 18
    STRING          shift and go to state 19
    ID              shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    INTEGER         shift and go to state 26

    id                             shift and go to state 45
    params                         shift and go to state 54
    expr                           shift and go to state 56
    limit                          shift and go to state 7
    derivate                       shift and go to state 8
    factorial                      shift and go to state 9
    abs                            shift and go to state 10
    fcall                          shift and go to state 44
    value                          shift and go to state 11
    bool                           shift and go to state 20
    number                         shift and go to state 21
    float                          shift and go to state 22

state 43

    (31) expr -> PAREN_OPEN expr . PAREN_CLOSE
    (24) expr -> expr . arith expr
    (25) expr -> expr . id
    (13) derivate -> expr . QUOTE
    (12) factorial -> expr . FACTOR
    (26) arith -> . PLUS
    (27) arith -> . MINUS
    (28) arith -> . MUL
    (29) arith -> . DIV
    (30) arith -> . EXPON
    (36) id -> . ID

    PAREN_CLOSE     shift and go to state 57
    QUOTE           shift and go to state 31
    FACTOR          shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    MUL             shift and go to state 35
    DIV             shift and go to state 36
    EXPON           shift and go to state 37
    ID              shift and go to state 23

    arith                          shift and go to state 29
    id                             shift and go to state 30

state 44

    (16) expr -> fcall .

    PAREN_CLOSE     reduce using rule 16 (expr -> fcall .)
    QUOTE           reduce using rule 16 (expr -> fcall .)
    FACTOR          reduce using rule 16 (expr -> fcall .)
    PLUS            reduce using rule 16 (expr -> fcall .)
    MINUS           reduce using rule 16 (expr -> fcall .)
    MUL             reduce using rule 16 (expr -> fcall .)
    DIV             reduce using rule 16 (expr -> fcall .)
    EXPON           reduce using rule 16 (expr -> fcall .)
    ID              reduce using rule 16 (expr -> fcall .)
    OR              reduce using rule 16 (expr -> fcall .)
    SEMICOLON       reduce using rule 16 (expr -> fcall .)
    NEWLINE         reduce using rule 16 (expr -> fcall .)
    COMMA           reduce using rule 16 (expr -> fcall .)
    ANGLE_CLOSE     reduce using rule 16 (expr -> fcall .)


state 45

    (17) fcall -> id . PAREN_OPEN params PAREN_CLOSE
    (18) fcall -> id . PAREN_OPEN PAREN_CLOSE
    (34) value -> id .

    PAREN_OPEN      shift and go to state 42
    PAREN_CLOSE     reduce using rule 34 (value -> id .)
    QUOTE           reduce using rule 34 (value -> id .)
    FACTOR          reduce using rule 34 (value -> id .)
    PLUS            reduce using rule 34 (value -> id .)
    MINUS           reduce using rule 34 (value -> id .)
    MUL             reduce using rule 34 (value -> id .)
    DIV             reduce using rule 34 (value -> id .)
    EXPON           reduce using rule 34 (value -> id .)
    ID              reduce using rule 34 (value -> id .)
    OR              reduce using rule 34 (value -> id .)
    SEMICOLON       reduce using rule 34 (value -> id .)
    NEWLINE         reduce using rule 34 (value -> id .)
    COMMA           reduce using rule 34 (value -> id .)
    ANGLE_CLOSE     reduce using rule 34 (value -> id .)


state 46

    (14) limit -> LIM ANGLE_OPEN . to ANGLE_CLOSE expr
    (15) to -> . id ARROW_RIGHT expr
    (36) id -> . ID

    ID              shift and go to state 23

    to                             shift and go to state 58
    id                             shift and go to state 59

state 47

    (11) abs -> OR expr . OR
    (24) expr -> expr . arith expr
    (25) expr -> expr . id
    (13) derivate -> expr . QUOTE
    (12) factorial -> expr . FACTOR
    (26) arith -> . PLUS
    (27) arith -> . MINUS
    (28) arith -> . MUL
    (29) arith -> . DIV
    (30) arith -> . EXPON
    (36) id -> . ID

    OR              shift and go to state 60
    QUOTE           shift and go to state 31
    FACTOR          shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    MUL             shift and go to state 35
    DIV             shift and go to state 36
    EXPON           shift and go to state 37
    ID              shift and go to state 23

    arith                          shift and go to state 29
    id                             shift and go to state 30

state 48

    (32) value -> MINUS value .

    QUOTE           reduce using rule 32 (value -> MINUS value .)
    FACTOR          reduce using rule 32 (value -> MINUS value .)
    SEMICOLON       reduce using rule 32 (value -> MINUS value .)
    NEWLINE         reduce using rule 32 (value -> MINUS value .)
    PLUS            reduce using rule 32 (value -> MINUS value .)
    MINUS           reduce using rule 32 (value -> MINUS value .)
    MUL             reduce using rule 32 (value -> MINUS value .)
    DIV             reduce using rule 32 (value -> MINUS value .)
    EXPON           reduce using rule 32 (value -> MINUS value .)
    ID              reduce using rule 32 (value -> MINUS value .)
    PAREN_CLOSE     reduce using rule 32 (value -> MINUS value .)
    OR              reduce using rule 32 (value -> MINUS value .)
    COMMA           reduce using rule 32 (value -> MINUS value .)
    ANGLE_CLOSE     reduce using rule 32 (value -> MINUS value .)


state 49

    (34) value -> id .

    QUOTE           reduce using rule 34 (value -> id .)
    FACTOR          reduce using rule 34 (value -> id .)
    SEMICOLON       reduce using rule 34 (value -> id .)
    NEWLINE         reduce using rule 34 (value -> id .)
    PLUS            reduce using rule 34 (value -> id .)
    MINUS           reduce using rule 34 (value -> id .)
    MUL             reduce using rule 34 (value -> id .)
    DIV             reduce using rule 34 (value -> id .)
    EXPON           reduce using rule 34 (value -> id .)
    ID              reduce using rule 34 (value -> id .)
    PAREN_CLOSE     reduce using rule 34 (value -> id .)
    OR              reduce using rule 34 (value -> id .)
    COMMA           reduce using rule 34 (value -> id .)
    ANGLE_CLOSE     reduce using rule 34 (value -> id .)


state 50

    (42) float -> INTEGER DOT . INTEGER

    INTEGER         shift and go to state 61


state 51

    (24) expr -> expr arith expr .
    (24) expr -> expr . arith expr
    (25) expr -> expr . id
    (13) derivate -> expr . QUOTE
    (12) factorial -> expr . FACTOR
    (26) arith -> . PLUS
    (27) arith -> . MINUS
    (28) arith -> . MUL
    (29) arith -> . DIV
    (30) arith -> . EXPON
    (36) id -> . ID

  ! shift/reduce conflict for QUOTE resolved as shift
  ! shift/reduce conflict for FACTOR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXPON resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    SEMICOLON       reduce using rule 24 (expr -> expr arith expr .)
    NEWLINE         reduce using rule 24 (expr -> expr arith expr .)
    PAREN_CLOSE     reduce using rule 24 (expr -> expr arith expr .)
    OR              reduce using rule 24 (expr -> expr arith expr .)
    COMMA           reduce using rule 24 (expr -> expr arith expr .)
    ANGLE_CLOSE     reduce using rule 24 (expr -> expr arith expr .)
    QUOTE           shift and go to state 31
    FACTOR          shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    MUL             shift and go to state 35
    DIV             shift and go to state 36
    EXPON           shift and go to state 37
    ID              shift and go to state 23

  ! QUOTE           [ reduce using rule 24 (expr -> expr arith expr .) ]
  ! FACTOR          [ reduce using rule 24 (expr -> expr arith expr .) ]
  ! PLUS            [ reduce using rule 24 (expr -> expr arith expr .) ]
  ! MINUS           [ reduce using rule 24 (expr -> expr arith expr .) ]
  ! MUL             [ reduce using rule 24 (expr -> expr arith expr .) ]
  ! DIV             [ reduce using rule 24 (expr -> expr arith expr .) ]
  ! EXPON           [ reduce using rule 24 (expr -> expr arith expr .) ]
  ! ID              [ reduce using rule 24 (expr -> expr arith expr .) ]

    arith                          shift and go to state 29
    id                             shift and go to state 30

state 52

    (22) assign -> fcall ASSIGN expr .
    (24) expr -> expr . arith expr
    (25) expr -> expr . id
    (13) derivate -> expr . QUOTE
    (12) factorial -> expr . FACTOR
    (26) arith -> . PLUS
    (27) arith -> . MINUS
    (28) arith -> . MUL
    (29) arith -> . DIV
    (30) arith -> . EXPON
    (36) id -> . ID

    SEMICOLON       reduce using rule 22 (assign -> fcall ASSIGN expr .)
    NEWLINE         reduce using rule 22 (assign -> fcall ASSIGN expr .)
    QUOTE           shift and go to state 31
    FACTOR          shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    MUL             shift and go to state 35
    DIV             shift and go to state 36
    EXPON           shift and go to state 37
    ID              shift and go to state 23

    arith                          shift and go to state 29
    id                             shift and go to state 30

state 53

    (21) assign -> id ASSIGN expr .
    (24) expr -> expr . arith expr
    (25) expr -> expr . id
    (13) derivate -> expr . QUOTE
    (12) factorial -> expr . FACTOR
    (26) arith -> . PLUS
    (27) arith -> . MINUS
    (28) arith -> . MUL
    (29) arith -> . DIV
    (30) arith -> . EXPON
    (36) id -> . ID

    SEMICOLON       reduce using rule 21 (assign -> id ASSIGN expr .)
    NEWLINE         reduce using rule 21 (assign -> id ASSIGN expr .)
    QUOTE           shift and go to state 31
    FACTOR          shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    MUL             shift and go to state 35
    DIV             shift and go to state 36
    EXPON           shift and go to state 37
    ID              shift and go to state 23

    id                             shift and go to state 30
    arith                          shift and go to state 29

state 54

    (17) fcall -> id PAREN_OPEN params . PAREN_CLOSE
    (20) params -> params . COMMA expr

    PAREN_CLOSE     shift and go to state 62
    COMMA           shift and go to state 63


state 55

    (18) fcall -> id PAREN_OPEN PAREN_CLOSE .

    ASSIGN          reduce using rule 18 (fcall -> id PAREN_OPEN PAREN_CLOSE .)
    SEMICOLON       reduce using rule 18 (fcall -> id PAREN_OPEN PAREN_CLOSE .)
    NEWLINE         reduce using rule 18 (fcall -> id PAREN_OPEN PAREN_CLOSE .)
    QUOTE           reduce using rule 18 (fcall -> id PAREN_OPEN PAREN_CLOSE .)
    FACTOR          reduce using rule 18 (fcall -> id PAREN_OPEN PAREN_CLOSE .)
    PLUS            reduce using rule 18 (fcall -> id PAREN_OPEN PAREN_CLOSE .)
    MINUS           reduce using rule 18 (fcall -> id PAREN_OPEN PAREN_CLOSE .)
    MUL             reduce using rule 18 (fcall -> id PAREN_OPEN PAREN_CLOSE .)
    DIV             reduce using rule 18 (fcall -> id PAREN_OPEN PAREN_CLOSE .)
    EXPON           reduce using rule 18 (fcall -> id PAREN_OPEN PAREN_CLOSE .)
    ID              reduce using rule 18 (fcall -> id PAREN_OPEN PAREN_CLOSE .)
    PAREN_CLOSE     reduce using rule 18 (fcall -> id PAREN_OPEN PAREN_CLOSE .)
    OR              reduce using rule 18 (fcall -> id PAREN_OPEN PAREN_CLOSE .)
    COMMA           reduce using rule 18 (fcall -> id PAREN_OPEN PAREN_CLOSE .)
    ANGLE_CLOSE     reduce using rule 18 (fcall -> id PAREN_OPEN PAREN_CLOSE .)


state 56

    (19) params -> expr .
    (24) expr -> expr . arith expr
    (25) expr -> expr . id
    (13) derivate -> expr . QUOTE
    (12) factorial -> expr . FACTOR
    (26) arith -> . PLUS
    (27) arith -> . MINUS
    (28) arith -> . MUL
    (29) arith -> . DIV
    (30) arith -> . EXPON
    (36) id -> . ID

    PAREN_CLOSE     reduce using rule 19 (params -> expr .)
    COMMA           reduce using rule 19 (params -> expr .)
    QUOTE           shift and go to state 31
    FACTOR          shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    MUL             shift and go to state 35
    DIV             shift and go to state 36
    EXPON           shift and go to state 37
    ID              shift and go to state 23

    arith                          shift and go to state 29
    id                             shift and go to state 30

state 57

    (31) expr -> PAREN_OPEN expr PAREN_CLOSE .

    QUOTE           reduce using rule 31 (expr -> PAREN_OPEN expr PAREN_CLOSE .)
    FACTOR          reduce using rule 31 (expr -> PAREN_OPEN expr PAREN_CLOSE .)
    SEMICOLON       reduce using rule 31 (expr -> PAREN_OPEN expr PAREN_CLOSE .)
    NEWLINE         reduce using rule 31 (expr -> PAREN_OPEN expr PAREN_CLOSE .)
    PLUS            reduce using rule 31 (expr -> PAREN_OPEN expr PAREN_CLOSE .)
    MINUS           reduce using rule 31 (expr -> PAREN_OPEN expr PAREN_CLOSE .)
    MUL             reduce using rule 31 (expr -> PAREN_OPEN expr PAREN_CLOSE .)
    DIV             reduce using rule 31 (expr -> PAREN_OPEN expr PAREN_CLOSE .)
    EXPON           reduce using rule 31 (expr -> PAREN_OPEN expr PAREN_CLOSE .)
    ID              reduce using rule 31 (expr -> PAREN_OPEN expr PAREN_CLOSE .)
    PAREN_CLOSE     reduce using rule 31 (expr -> PAREN_OPEN expr PAREN_CLOSE .)
    OR              reduce using rule 31 (expr -> PAREN_OPEN expr PAREN_CLOSE .)
    COMMA           reduce using rule 31 (expr -> PAREN_OPEN expr PAREN_CLOSE .)
    ANGLE_CLOSE     reduce using rule 31 (expr -> PAREN_OPEN expr PAREN_CLOSE .)


state 58

    (14) limit -> LIM ANGLE_OPEN to . ANGLE_CLOSE expr

    ANGLE_CLOSE     shift and go to state 64


state 59

    (15) to -> id . ARROW_RIGHT expr

    ARROW_RIGHT     shift and go to state 65


state 60

    (11) abs -> OR expr OR .

    QUOTE           reduce using rule 11 (abs -> OR expr OR .)
    FACTOR          reduce using rule 11 (abs -> OR expr OR .)
    SEMICOLON       reduce using rule 11 (abs -> OR expr OR .)
    NEWLINE         reduce using rule 11 (abs -> OR expr OR .)
    PLUS            reduce using rule 11 (abs -> OR expr OR .)
    MINUS           reduce using rule 11 (abs -> OR expr OR .)
    MUL             reduce using rule 11 (abs -> OR expr OR .)
    DIV             reduce using rule 11 (abs -> OR expr OR .)
    EXPON           reduce using rule 11 (abs -> OR expr OR .)
    ID              reduce using rule 11 (abs -> OR expr OR .)
    PAREN_CLOSE     reduce using rule 11 (abs -> OR expr OR .)
    OR              reduce using rule 11 (abs -> OR expr OR .)
    COMMA           reduce using rule 11 (abs -> OR expr OR .)
    ANGLE_CLOSE     reduce using rule 11 (abs -> OR expr OR .)


state 61

    (42) float -> INTEGER DOT INTEGER .

    QUOTE           reduce using rule 42 (float -> INTEGER DOT INTEGER .)
    FACTOR          reduce using rule 42 (float -> INTEGER DOT INTEGER .)
    SEMICOLON       reduce using rule 42 (float -> INTEGER DOT INTEGER .)
    NEWLINE         reduce using rule 42 (float -> INTEGER DOT INTEGER .)
    PLUS            reduce using rule 42 (float -> INTEGER DOT INTEGER .)
    MINUS           reduce using rule 42 (float -> INTEGER DOT INTEGER .)
    MUL             reduce using rule 42 (float -> INTEGER DOT INTEGER .)
    DIV             reduce using rule 42 (float -> INTEGER DOT INTEGER .)
    EXPON           reduce using rule 42 (float -> INTEGER DOT INTEGER .)
    ID              reduce using rule 42 (float -> INTEGER DOT INTEGER .)
    PAREN_CLOSE     reduce using rule 42 (float -> INTEGER DOT INTEGER .)
    OR              reduce using rule 42 (float -> INTEGER DOT INTEGER .)
    COMMA           reduce using rule 42 (float -> INTEGER DOT INTEGER .)
    ANGLE_CLOSE     reduce using rule 42 (float -> INTEGER DOT INTEGER .)


state 62

    (17) fcall -> id PAREN_OPEN params PAREN_CLOSE .

    ASSIGN          reduce using rule 17 (fcall -> id PAREN_OPEN params PAREN_CLOSE .)
    SEMICOLON       reduce using rule 17 (fcall -> id PAREN_OPEN params PAREN_CLOSE .)
    NEWLINE         reduce using rule 17 (fcall -> id PAREN_OPEN params PAREN_CLOSE .)
    QUOTE           reduce using rule 17 (fcall -> id PAREN_OPEN params PAREN_CLOSE .)
    FACTOR          reduce using rule 17 (fcall -> id PAREN_OPEN params PAREN_CLOSE .)
    PLUS            reduce using rule 17 (fcall -> id PAREN_OPEN params PAREN_CLOSE .)
    MINUS           reduce using rule 17 (fcall -> id PAREN_OPEN params PAREN_CLOSE .)
    MUL             reduce using rule 17 (fcall -> id PAREN_OPEN params PAREN_CLOSE .)
    DIV             reduce using rule 17 (fcall -> id PAREN_OPEN params PAREN_CLOSE .)
    EXPON           reduce using rule 17 (fcall -> id PAREN_OPEN params PAREN_CLOSE .)
    ID              reduce using rule 17 (fcall -> id PAREN_OPEN params PAREN_CLOSE .)
    PAREN_CLOSE     reduce using rule 17 (fcall -> id PAREN_OPEN params PAREN_CLOSE .)
    OR              reduce using rule 17 (fcall -> id PAREN_OPEN params PAREN_CLOSE .)
    COMMA           reduce using rule 17 (fcall -> id PAREN_OPEN params PAREN_CLOSE .)
    ANGLE_CLOSE     reduce using rule 17 (fcall -> id PAREN_OPEN params PAREN_CLOSE .)


state 63

    (20) params -> params COMMA . expr
    (7) expr -> . limit
    (8) expr -> . derivate
    (9) expr -> . factorial
    (10) expr -> . abs
    (16) expr -> . fcall
    (23) expr -> . value
    (24) expr -> . expr arith expr
    (25) expr -> . expr id
    (31) expr -> . PAREN_OPEN expr PAREN_CLOSE
    (14) limit -> . LIM ANGLE_OPEN to ANGLE_CLOSE expr
    (13) derivate -> . expr QUOTE
    (12) factorial -> . expr FACTOR
    (11) abs -> . OR expr OR
    (17) fcall -> . id PAREN_OPEN params PAREN_CLOSE
    (18) fcall -> . id PAREN_OPEN PAREN_CLOSE
    (32) value -> . MINUS value
    (33) value -> . STRING
    (34) value -> . id
    (35) value -> . bool
    (39) value -> . number
    (40) value -> . float
    (36) id -> . ID
    (37) bool -> . TRUE
    (38) bool -> . FALSE
    (41) number -> . INTEGER
    (42) float -> . INTEGER DOT INTEGER

    PAREN_OPEN      shift and go to state 13
    LIM             shift and go to state 16
    OR              shift and go to state 17
    MINUS           shift and go to state 18
    STRING          shift and go to state 19
    ID              shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    INTEGER         shift and go to state 26

    expr                           shift and go to state 66
    limit                          shift and go to state 7
    derivate                       shift and go to state 8
    factorial                      shift and go to state 9
    abs                            shift and go to state 10
    fcall                          shift and go to state 44
    value                          shift and go to state 11
    id                             shift and go to state 45
    bool                           shift and go to state 20
    number                         shift and go to state 21
    float                          shift and go to state 22

state 64

    (14) limit -> LIM ANGLE_OPEN to ANGLE_CLOSE . expr
    (7) expr -> . limit
    (8) expr -> . derivate
    (9) expr -> . factorial
    (10) expr -> . abs
    (16) expr -> . fcall
    (23) expr -> . value
    (24) expr -> . expr arith expr
    (25) expr -> . expr id
    (31) expr -> . PAREN_OPEN expr PAREN_CLOSE
    (14) limit -> . LIM ANGLE_OPEN to ANGLE_CLOSE expr
    (13) derivate -> . expr QUOTE
    (12) factorial -> . expr FACTOR
    (11) abs -> . OR expr OR
    (17) fcall -> . id PAREN_OPEN params PAREN_CLOSE
    (18) fcall -> . id PAREN_OPEN PAREN_CLOSE
    (32) value -> . MINUS value
    (33) value -> . STRING
    (34) value -> . id
    (35) value -> . bool
    (39) value -> . number
    (40) value -> . float
    (36) id -> . ID
    (37) bool -> . TRUE
    (38) bool -> . FALSE
    (41) number -> . INTEGER
    (42) float -> . INTEGER DOT INTEGER

    PAREN_OPEN      shift and go to state 13
    LIM             shift and go to state 16
    OR              shift and go to state 17
    MINUS           shift and go to state 18
    STRING          shift and go to state 19
    ID              shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    INTEGER         shift and go to state 26

    expr                           shift and go to state 67
    limit                          shift and go to state 7
    derivate                       shift and go to state 8
    factorial                      shift and go to state 9
    abs                            shift and go to state 10
    fcall                          shift and go to state 44
    value                          shift and go to state 11
    id                             shift and go to state 45
    bool                           shift and go to state 20
    number                         shift and go to state 21
    float                          shift and go to state 22

state 65

    (15) to -> id ARROW_RIGHT . expr
    (7) expr -> . limit
    (8) expr -> . derivate
    (9) expr -> . factorial
    (10) expr -> . abs
    (16) expr -> . fcall
    (23) expr -> . value
    (24) expr -> . expr arith expr
    (25) expr -> . expr id
    (31) expr -> . PAREN_OPEN expr PAREN_CLOSE
    (14) limit -> . LIM ANGLE_OPEN to ANGLE_CLOSE expr
    (13) derivate -> . expr QUOTE
    (12) factorial -> . expr FACTOR
    (11) abs -> . OR expr OR
    (17) fcall -> . id PAREN_OPEN params PAREN_CLOSE
    (18) fcall -> . id PAREN_OPEN PAREN_CLOSE
    (32) value -> . MINUS value
    (33) value -> . STRING
    (34) value -> . id
    (35) value -> . bool
    (39) value -> . number
    (40) value -> . float
    (36) id -> . ID
    (37) bool -> . TRUE
    (38) bool -> . FALSE
    (41) number -> . INTEGER
    (42) float -> . INTEGER DOT INTEGER

    PAREN_OPEN      shift and go to state 13
    LIM             shift and go to state 16
    OR              shift and go to state 17
    MINUS           shift and go to state 18
    STRING          shift and go to state 19
    ID              shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    INTEGER         shift and go to state 26

    id                             shift and go to state 45
    expr                           shift and go to state 68
    limit                          shift and go to state 7
    derivate                       shift and go to state 8
    factorial                      shift and go to state 9
    abs                            shift and go to state 10
    fcall                          shift and go to state 44
    value                          shift and go to state 11
    bool                           shift and go to state 20
    number                         shift and go to state 21
    float                          shift and go to state 22

state 66

    (20) params -> params COMMA expr .
    (24) expr -> expr . arith expr
    (25) expr -> expr . id
    (13) derivate -> expr . QUOTE
    (12) factorial -> expr . FACTOR
    (26) arith -> . PLUS
    (27) arith -> . MINUS
    (28) arith -> . MUL
    (29) arith -> . DIV
    (30) arith -> . EXPON
    (36) id -> . ID

    PAREN_CLOSE     reduce using rule 20 (params -> params COMMA expr .)
    COMMA           reduce using rule 20 (params -> params COMMA expr .)
    QUOTE           shift and go to state 31
    FACTOR          shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    MUL             shift and go to state 35
    DIV             shift and go to state 36
    EXPON           shift and go to state 37
    ID              shift and go to state 23

    arith                          shift and go to state 29
    id                             shift and go to state 30

state 67

    (14) limit -> LIM ANGLE_OPEN to ANGLE_CLOSE expr .
    (24) expr -> expr . arith expr
    (25) expr -> expr . id
    (13) derivate -> expr . QUOTE
    (12) factorial -> expr . FACTOR
    (26) arith -> . PLUS
    (27) arith -> . MINUS
    (28) arith -> . MUL
    (29) arith -> . DIV
    (30) arith -> . EXPON
    (36) id -> . ID

  ! shift/reduce conflict for QUOTE resolved as shift
  ! shift/reduce conflict for FACTOR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXPON resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    SEMICOLON       reduce using rule 14 (limit -> LIM ANGLE_OPEN to ANGLE_CLOSE expr .)
    NEWLINE         reduce using rule 14 (limit -> LIM ANGLE_OPEN to ANGLE_CLOSE expr .)
    PAREN_CLOSE     reduce using rule 14 (limit -> LIM ANGLE_OPEN to ANGLE_CLOSE expr .)
    OR              reduce using rule 14 (limit -> LIM ANGLE_OPEN to ANGLE_CLOSE expr .)
    COMMA           reduce using rule 14 (limit -> LIM ANGLE_OPEN to ANGLE_CLOSE expr .)
    ANGLE_CLOSE     reduce using rule 14 (limit -> LIM ANGLE_OPEN to ANGLE_CLOSE expr .)
    QUOTE           shift and go to state 31
    FACTOR          shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    MUL             shift and go to state 35
    DIV             shift and go to state 36
    EXPON           shift and go to state 37
    ID              shift and go to state 23

  ! QUOTE           [ reduce using rule 14 (limit -> LIM ANGLE_OPEN to ANGLE_CLOSE expr .) ]
  ! FACTOR          [ reduce using rule 14 (limit -> LIM ANGLE_OPEN to ANGLE_CLOSE expr .) ]
  ! PLUS            [ reduce using rule 14 (limit -> LIM ANGLE_OPEN to ANGLE_CLOSE expr .) ]
  ! MINUS           [ reduce using rule 14 (limit -> LIM ANGLE_OPEN to ANGLE_CLOSE expr .) ]
  ! MUL             [ reduce using rule 14 (limit -> LIM ANGLE_OPEN to ANGLE_CLOSE expr .) ]
  ! DIV             [ reduce using rule 14 (limit -> LIM ANGLE_OPEN to ANGLE_CLOSE expr .) ]
  ! EXPON           [ reduce using rule 14 (limit -> LIM ANGLE_OPEN to ANGLE_CLOSE expr .) ]
  ! ID              [ reduce using rule 14 (limit -> LIM ANGLE_OPEN to ANGLE_CLOSE expr .) ]

    arith                          shift and go to state 29
    id                             shift and go to state 30

state 68

    (15) to -> id ARROW_RIGHT expr .
    (24) expr -> expr . arith expr
    (25) expr -> expr . id
    (13) derivate -> expr . QUOTE
    (12) factorial -> expr . FACTOR
    (26) arith -> . PLUS
    (27) arith -> . MINUS
    (28) arith -> . MUL
    (29) arith -> . DIV
    (30) arith -> . EXPON
    (36) id -> . ID

    ANGLE_CLOSE     reduce using rule 15 (to -> id ARROW_RIGHT expr .)
    QUOTE           shift and go to state 31
    FACTOR          shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    MUL             shift and go to state 35
    DIV             shift and go to state 36
    EXPON           shift and go to state 37
    ID              shift and go to state 23

    id                             shift and go to state 30
    arith                          shift and go to state 29
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 6 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 6 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 51 resolved as shift
WARNING: shift/reduce conflict for FACTOR in state 51 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 51 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 51 resolved as shift
WARNING: shift/reduce conflict for MUL in state 51 resolved as shift
WARNING: shift/reduce conflict for DIV in state 51 resolved as shift
WARNING: shift/reduce conflict for EXPON in state 51 resolved as shift
WARNING: shift/reduce conflict for ID in state 51 resolved as shift
WARNING: shift/reduce conflict for QUOTE in state 67 resolved as shift
WARNING: shift/reduce conflict for FACTOR in state 67 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MUL in state 67 resolved as shift
WARNING: shift/reduce conflict for DIV in state 67 resolved as shift
WARNING: shift/reduce conflict for EXPON in state 67 resolved as shift
WARNING: shift/reduce conflict for ID in state 67 resolved as shift
